/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as MainRouteImport } from './routes/main'
import { Route as LoginRouteImport } from './routes/login'
import { Route as FindUserRouteImport } from './routes/find-user'
import { Route as FindPwdRouteImport } from './routes/find-pwd'
import { Route as DockerDocsRouteImport } from './routes/docker-docs'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ThreadIndexRouteImport } from './routes/thread/index'
import { Route as BoardIndexRouteImport } from './routes/board/index'
import { Route as ThreadWriteRouteImport } from './routes/thread/write'
import { Route as ThreadThreadIdRouteImport } from './routes/thread/$threadId'
import { Route as BoardWriteRouteImport } from './routes/board/write'
import { Route as BoardIdRouteImport } from './routes/board/$id'
import { Route as ThreadThreadIdEditRouteImport } from './routes/thread/$threadId/edit'
import { Route as DocsProjectIdChapterIdRouteImport } from './routes/docs/$projectId/$chapterId'
import { Route as BoardIdEditRouteImport } from './routes/board/$id/edit'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRoute = MainRouteImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const FindUserRoute = FindUserRouteImport.update({
  id: '/find-user',
  path: '/find-user',
  getParentRoute: () => rootRouteImport,
} as any)
const FindPwdRoute = FindPwdRouteImport.update({
  id: '/find-pwd',
  path: '/find-pwd',
  getParentRoute: () => rootRouteImport,
} as any)
const DockerDocsRoute = DockerDocsRouteImport.update({
  id: '/docker-docs',
  path: '/docker-docs',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ThreadIndexRoute = ThreadIndexRouteImport.update({
  id: '/thread/',
  path: '/thread/',
  getParentRoute: () => rootRouteImport,
} as any)
const BoardIndexRoute = BoardIndexRouteImport.update({
  id: '/board/',
  path: '/board/',
  getParentRoute: () => rootRouteImport,
} as any)
const ThreadWriteRoute = ThreadWriteRouteImport.update({
  id: '/thread/write',
  path: '/thread/write',
  getParentRoute: () => rootRouteImport,
} as any)
const ThreadThreadIdRoute = ThreadThreadIdRouteImport.update({
  id: '/thread/$threadId',
  path: '/thread/$threadId',
  getParentRoute: () => rootRouteImport,
} as any)
const BoardWriteRoute = BoardWriteRouteImport.update({
  id: '/board/write',
  path: '/board/write',
  getParentRoute: () => rootRouteImport,
} as any)
const BoardIdRoute = BoardIdRouteImport.update({
  id: '/board/$id',
  path: '/board/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ThreadThreadIdEditRoute = ThreadThreadIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => ThreadThreadIdRoute,
} as any)
const DocsProjectIdChapterIdRoute = DocsProjectIdChapterIdRouteImport.update({
  id: '/docs/$projectId/$chapterId',
  path: '/docs/$projectId/$chapterId',
  getParentRoute: () => rootRouteImport,
} as any)
const BoardIdEditRoute = BoardIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => BoardIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/docker-docs': typeof DockerDocsRoute
  '/find-pwd': typeof FindPwdRoute
  '/find-user': typeof FindUserRoute
  '/login': typeof LoginRoute
  '/main': typeof MainRoute
  '/register': typeof RegisterRoute
  '/board/$id': typeof BoardIdRouteWithChildren
  '/board/write': typeof BoardWriteRoute
  '/thread/$threadId': typeof ThreadThreadIdRouteWithChildren
  '/thread/write': typeof ThreadWriteRoute
  '/board': typeof BoardIndexRoute
  '/thread': typeof ThreadIndexRoute
  '/board/$id/edit': typeof BoardIdEditRoute
  '/docs/$projectId/$chapterId': typeof DocsProjectIdChapterIdRoute
  '/thread/$threadId/edit': typeof ThreadThreadIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/docker-docs': typeof DockerDocsRoute
  '/find-pwd': typeof FindPwdRoute
  '/find-user': typeof FindUserRoute
  '/login': typeof LoginRoute
  '/main': typeof MainRoute
  '/register': typeof RegisterRoute
  '/board/$id': typeof BoardIdRouteWithChildren
  '/board/write': typeof BoardWriteRoute
  '/thread/$threadId': typeof ThreadThreadIdRouteWithChildren
  '/thread/write': typeof ThreadWriteRoute
  '/board': typeof BoardIndexRoute
  '/thread': typeof ThreadIndexRoute
  '/board/$id/edit': typeof BoardIdEditRoute
  '/docs/$projectId/$chapterId': typeof DocsProjectIdChapterIdRoute
  '/thread/$threadId/edit': typeof ThreadThreadIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/docker-docs': typeof DockerDocsRoute
  '/find-pwd': typeof FindPwdRoute
  '/find-user': typeof FindUserRoute
  '/login': typeof LoginRoute
  '/main': typeof MainRoute
  '/register': typeof RegisterRoute
  '/board/$id': typeof BoardIdRouteWithChildren
  '/board/write': typeof BoardWriteRoute
  '/thread/$threadId': typeof ThreadThreadIdRouteWithChildren
  '/thread/write': typeof ThreadWriteRoute
  '/board/': typeof BoardIndexRoute
  '/thread/': typeof ThreadIndexRoute
  '/board/$id/edit': typeof BoardIdEditRoute
  '/docs/$projectId/$chapterId': typeof DocsProjectIdChapterIdRoute
  '/thread/$threadId/edit': typeof ThreadThreadIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/docker-docs'
    | '/find-pwd'
    | '/find-user'
    | '/login'
    | '/main'
    | '/register'
    | '/board/$id'
    | '/board/write'
    | '/thread/$threadId'
    | '/thread/write'
    | '/board'
    | '/thread'
    | '/board/$id/edit'
    | '/docs/$projectId/$chapterId'
    | '/thread/$threadId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/docker-docs'
    | '/find-pwd'
    | '/find-user'
    | '/login'
    | '/main'
    | '/register'
    | '/board/$id'
    | '/board/write'
    | '/thread/$threadId'
    | '/thread/write'
    | '/board'
    | '/thread'
    | '/board/$id/edit'
    | '/docs/$projectId/$chapterId'
    | '/thread/$threadId/edit'
  id:
    | '__root__'
    | '/'
    | '/docker-docs'
    | '/find-pwd'
    | '/find-user'
    | '/login'
    | '/main'
    | '/register'
    | '/board/$id'
    | '/board/write'
    | '/thread/$threadId'
    | '/thread/write'
    | '/board/'
    | '/thread/'
    | '/board/$id/edit'
    | '/docs/$projectId/$chapterId'
    | '/thread/$threadId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DockerDocsRoute: typeof DockerDocsRoute
  FindPwdRoute: typeof FindPwdRoute
  FindUserRoute: typeof FindUserRoute
  LoginRoute: typeof LoginRoute
  MainRoute: typeof MainRoute
  RegisterRoute: typeof RegisterRoute
  BoardIdRoute: typeof BoardIdRouteWithChildren
  BoardWriteRoute: typeof BoardWriteRoute
  ThreadThreadIdRoute: typeof ThreadThreadIdRouteWithChildren
  ThreadWriteRoute: typeof ThreadWriteRoute
  BoardIndexRoute: typeof BoardIndexRoute
  ThreadIndexRoute: typeof ThreadIndexRoute
  DocsProjectIdChapterIdRoute: typeof DocsProjectIdChapterIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/main': {
      id: '/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/find-user': {
      id: '/find-user'
      path: '/find-user'
      fullPath: '/find-user'
      preLoaderRoute: typeof FindUserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/find-pwd': {
      id: '/find-pwd'
      path: '/find-pwd'
      fullPath: '/find-pwd'
      preLoaderRoute: typeof FindPwdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docker-docs': {
      id: '/docker-docs'
      path: '/docker-docs'
      fullPath: '/docker-docs'
      preLoaderRoute: typeof DockerDocsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/thread/': {
      id: '/thread/'
      path: '/thread'
      fullPath: '/thread'
      preLoaderRoute: typeof ThreadIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/board/': {
      id: '/board/'
      path: '/board'
      fullPath: '/board'
      preLoaderRoute: typeof BoardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/thread/write': {
      id: '/thread/write'
      path: '/thread/write'
      fullPath: '/thread/write'
      preLoaderRoute: typeof ThreadWriteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/thread/$threadId': {
      id: '/thread/$threadId'
      path: '/thread/$threadId'
      fullPath: '/thread/$threadId'
      preLoaderRoute: typeof ThreadThreadIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/board/write': {
      id: '/board/write'
      path: '/board/write'
      fullPath: '/board/write'
      preLoaderRoute: typeof BoardWriteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/board/$id': {
      id: '/board/$id'
      path: '/board/$id'
      fullPath: '/board/$id'
      preLoaderRoute: typeof BoardIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/thread/$threadId/edit': {
      id: '/thread/$threadId/edit'
      path: '/edit'
      fullPath: '/thread/$threadId/edit'
      preLoaderRoute: typeof ThreadThreadIdEditRouteImport
      parentRoute: typeof ThreadThreadIdRoute
    }
    '/docs/$projectId/$chapterId': {
      id: '/docs/$projectId/$chapterId'
      path: '/docs/$projectId/$chapterId'
      fullPath: '/docs/$projectId/$chapterId'
      preLoaderRoute: typeof DocsProjectIdChapterIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/board/$id/edit': {
      id: '/board/$id/edit'
      path: '/edit'
      fullPath: '/board/$id/edit'
      preLoaderRoute: typeof BoardIdEditRouteImport
      parentRoute: typeof BoardIdRoute
    }
  }
}

interface BoardIdRouteChildren {
  BoardIdEditRoute: typeof BoardIdEditRoute
}

const BoardIdRouteChildren: BoardIdRouteChildren = {
  BoardIdEditRoute: BoardIdEditRoute,
}

const BoardIdRouteWithChildren =
  BoardIdRoute._addFileChildren(BoardIdRouteChildren)

interface ThreadThreadIdRouteChildren {
  ThreadThreadIdEditRoute: typeof ThreadThreadIdEditRoute
}

const ThreadThreadIdRouteChildren: ThreadThreadIdRouteChildren = {
  ThreadThreadIdEditRoute: ThreadThreadIdEditRoute,
}

const ThreadThreadIdRouteWithChildren = ThreadThreadIdRoute._addFileChildren(
  ThreadThreadIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DockerDocsRoute: DockerDocsRoute,
  FindPwdRoute: FindPwdRoute,
  FindUserRoute: FindUserRoute,
  LoginRoute: LoginRoute,
  MainRoute: MainRoute,
  RegisterRoute: RegisterRoute,
  BoardIdRoute: BoardIdRouteWithChildren,
  BoardWriteRoute: BoardWriteRoute,
  ThreadThreadIdRoute: ThreadThreadIdRouteWithChildren,
  ThreadWriteRoute: ThreadWriteRoute,
  BoardIndexRoute: BoardIndexRoute,
  ThreadIndexRoute: ThreadIndexRoute,
  DocsProjectIdChapterIdRoute: DocsProjectIdChapterIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
